
import { q } from './db.js'; import { v4 as uuid } from 'uuid';
export async function knockoutPair(tid, game='chess'){ const t=(await q('select * from tournaments where id=$1',[tid]))[0]; const players=await q('select user_id from tournament_players where tournament_id=$1',[tid]); const ids=players.map(p=>p.user_id); const shuffled=[...ids].sort(()=>Math.random()-0.5); const round=(t.round||0)+1; const created=[]; for(let i=0;i<shuffled.length;i+=2){ if(!shuffled[i+1]) break; const a=shuffled[i], b=shuffled[i+1]; const mid=uuid(), room='m_'+mid; await q('insert into matches(id,room,game,demo,stake_cents,status,creator_user_id,taker_user_id) values ($1,$2,$3,$4,$5,$6,$7,$8)',[mid,room,game,true,0,'OPEN',a,b]); await q('insert into tournament_matches(id,tournament_id,round,match_id,a_user_id,b_user_id) values ($1,$2,$3,$4,$5,$6)',[uuid(),tid,round,mid,a,b]); created.push(mid) } await q('update tournaments set round=$1 where id=$2',[round,tid]); return created }
export async function swissPair(tid, game='chess'){ const t=(await q('select * from tournaments where id=$1',[tid]))[0]; const players=await q('select user_id, score from tournament_players where tournament_id=$1 order by score desc',[tid]); const played=await q('select a_user_id, b_user_id from tournament_matches where tournament_id=$1',[tid]); const havePlayed=new Set(played.map(p=>`${p.a_user_id}|${p.b_user_id}`)); const ids=players.map(p=>p.user_id); const round=(t.round||0)+1; const used=new Set(); const pairs=[]; for(let i=0;i<ids.length;i++){ const a=ids[i]; if(used.has(a)) continue; let found=false; for(let j=i+1;j<ids.length;j++){ const b=ids[j]; if(used.has(b)) continue; const k=`${a}|${b}`,k2=`${b}|${a}`; if(!havePlayed.has(k)&&!havePlayed.has(k2)){ pairs.push([a,b]); used.add(a); used.add(b); found=true; break } } if(!found){ for(let j=i+1;j<ids.length;j++){ const b=ids[j]; if(!used.has(b)){ pairs.push([a,b]); used.add(a); used.add(b); break } } } } const created=[]; for(const [a,b] of pairs){ const mid=uuid(), room='m_'+mid; await q('insert into matches(id,room,game,demo,stake_cents,status,creator_user_id,taker_user_id) values ($1,$2,$3,$4,$5,$6,$7,$8)',[mid,room,game,true,0,'OPEN',a,b]); await q('insert into tournament_matches(id,tournament_id,round,match_id,a_user_id,b_user_id) values ($1,$2,$3,$4,$5,$6)',[uuid(),tid,round,mid,a,b]); created.push(mid) } await q('update tournaments set round=$1 where id=$2',[round,tid]); return created }
